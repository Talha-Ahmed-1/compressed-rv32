;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit InstAligner : 
  module InstAligner : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instIn : UInt<32>, instOut : UInt<32>, flip pcIn : UInt<32>, pcOut : UInt<32>}
    
    reg case1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[InstAligner.scala 16:24]
    reg case2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[InstAligner.scala 17:24]
    reg instReg : UInt, clock with : (reset => (reset, io.instIn)) @[InstAligner.scala 18:26]
    io.pcOut <= io.pcIn @[InstAligner.scala 19:14]
    io.instOut <= instReg @[InstAligner.scala 20:16]
    node _T = eq(UInt<1>("h00"), case1) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instIn, 1, 0) @[InstAligner.scala 27:27]
      node _T_2 = neq(_T_1, UInt<2>("h03")) @[InstAligner.scala 27:33]
      node _T_3 = bits(io.instIn, 17, 16) @[InstAligner.scala 27:53]
      node _T_4 = neq(_T_3, UInt<2>("h03")) @[InstAligner.scala 27:61]
      node _T_5 = and(_T_2, _T_4) @[InstAligner.scala 27:41]
      when _T_5 : @[InstAligner.scala 27:69]
        node _io_instOut_T = bits(io.instIn, 15, 0) @[InstAligner.scala 28:40]
        io.instOut <= _io_instOut_T @[InstAligner.scala 28:28]
        instReg <= io.instIn @[InstAligner.scala 30:25]
        node _io_pcOut_T = add(io.pcIn, UInt<2>("h02")) @[InstAligner.scala 31:37]
        node _io_pcOut_T_1 = tail(_io_pcOut_T, 1) @[InstAligner.scala 31:37]
        io.pcOut <= _io_pcOut_T_1 @[InstAligner.scala 31:26]
        case1 <= UInt<1>("h01") @[InstAligner.scala 32:23]
        skip @[InstAligner.scala 27:69]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_6 = eq(UInt<1>("h01"), case1) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        case1 <= UInt<1>("h00") @[InstAligner.scala 36:19]
        node _io_instOut_T_1 = bits(instReg, 31, 16) @[InstAligner.scala 37:34]
        io.instOut <= _io_instOut_T_1 @[InstAligner.scala 37:24]
        node _io_pcOut_T_2 = add(io.pcIn, UInt<2>("h02")) @[InstAligner.scala 39:33]
        node _io_pcOut_T_3 = tail(_io_pcOut_T_2, 1) @[InstAligner.scala 39:33]
        io.pcOut <= _io_pcOut_T_3 @[InstAligner.scala 39:22]
        skip @[Conditional.scala 39:67]
    node _T_7 = eq(UInt<1>("h00"), case2) @[Conditional.scala 37:30]
    when _T_7 : @[Conditional.scala 40:58]
      node _T_8 = bits(io.instIn, 1, 0) @[InstAligner.scala 45:27]
      node _T_9 = neq(_T_8, UInt<2>("h03")) @[InstAligner.scala 45:33]
      node _T_10 = bits(io.instIn, 17, 16) @[InstAligner.scala 45:53]
      node _T_11 = eq(_T_10, UInt<2>("h03")) @[InstAligner.scala 45:61]
      node _T_12 = and(_T_9, _T_11) @[InstAligner.scala 45:41]
      when _T_12 : @[InstAligner.scala 45:69]
        node _io_instOut_T_2 = bits(io.instIn, 15, 0) @[InstAligner.scala 46:40]
        io.instOut <= _io_instOut_T_2 @[InstAligner.scala 46:28]
        instReg <= io.instIn @[InstAligner.scala 48:25]
        node _io_pcOut_T_4 = add(io.pcIn, UInt<2>("h02")) @[InstAligner.scala 49:37]
        node _io_pcOut_T_5 = tail(_io_pcOut_T_4, 1) @[InstAligner.scala 49:37]
        io.pcOut <= _io_pcOut_T_5 @[InstAligner.scala 49:26]
        case2 <= UInt<1>("h01") @[InstAligner.scala 50:23]
        skip @[InstAligner.scala 45:69]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_13 = eq(UInt<1>("h01"), case2) @[Conditional.scala 37:30]
      when _T_13 : @[Conditional.scala 39:67]
        node io_instOut_hi = bits(io.instIn, 15, 0) @[InstAligner.scala 54:40]
        node io_instOut_lo = bits(instReg, 31, 16) @[InstAligner.scala 54:55]
        node _io_instOut_T_3 = cat(io_instOut_hi, io_instOut_lo) @[Cat.scala 30:58]
        io.instOut <= _io_instOut_T_3 @[InstAligner.scala 54:24]
        node _io_pcOut_T_6 = add(io.pcIn, UInt<3>("h04")) @[InstAligner.scala 56:33]
        node _io_pcOut_T_7 = tail(_io_pcOut_T_6, 1) @[InstAligner.scala 56:33]
        io.pcOut <= _io_pcOut_T_7 @[InstAligner.scala 56:22]
        node _T_14 = bits(io.instIn, 17, 16) @[InstAligner.scala 57:28]
        node _T_15 = neq(_T_14, UInt<2>("h03")) @[InstAligner.scala 57:36]
        when _T_15 : @[InstAligner.scala 57:44]
          case1 <= UInt<1>("h00") @[InstAligner.scala 58:23]
          case2 <= UInt<1>("h00") @[InstAligner.scala 59:23]
          skip @[InstAligner.scala 57:44]
        else : @[InstAligner.scala 60:49]
          node _T_16 = bits(io.instIn, 17, 16) @[InstAligner.scala 60:33]
          node _T_17 = eq(_T_16, UInt<2>("h03")) @[InstAligner.scala 60:41]
          when _T_17 : @[InstAligner.scala 60:49]
            instReg <= io.instIn @[InstAligner.scala 61:25]
            case2 <= UInt<1>("h01") @[InstAligner.scala 62:23]
            skip @[InstAligner.scala 60:49]
          else : @[InstAligner.scala 63:24]
            case2 <= UInt<1>("h00") @[InstAligner.scala 64:23]
            skip @[InstAligner.scala 63:24]
        skip @[Conditional.scala 39:67]
    
